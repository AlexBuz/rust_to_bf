fn add(mut a: usize, b: usize) -> usize {
    a += b;
    return a;
}

fn sub(mut a: usize, b: usize) -> usize {
    a -= b;
    return a;
}

fn mul(mut a: usize, b: usize) -> usize {
    let mut result = 0;
    while a {
        a -= 1;
        result += b;
    }
    return result;
}

fn div(mut dividend: usize, divisor: usize) -> usize {
    let mut remainder = divisor;
    let mut quotient = 0;
    while dividend {
        dividend -= 1;
        match remainder {
            0 => {
                remainder = divisor;
                quotient += 1;
            }
        }
        remainder -= 1;
    }
    if remainder {
        let temp = remainder;
        remainder = divisor;
        remainder -= temp;
    } else {
        quotient += 1;
    }
    return quotient;
}

fn rem(mut dividend: usize, divisor: usize) -> usize {
    let mut remainder = divisor;
    let mut quotient = 0;
    while dividend {
        dividend -= 1;
        match remainder {
            0 => {
                remainder = divisor;
                quotient += 1;
            }
        }
        remainder -= 1;
    }
    if remainder {
        let temp = remainder;
        remainder = divisor;
        remainder -= temp;
    } else {
        quotient += 1;
    }
    return remainder;
}

fn eq(mut a: usize, b: usize) -> usize {
    a -= b;
    if a {
        return 0;
    } else {
        return 1;
    }
}

fn ne(mut a: usize, b: usize) -> usize {
    a -= b;
    if a {
        return 1;
    } else {
        return 0;
    }
}

fn lt(mut a: usize, mut b: usize) -> usize {
    while b {
        b -= 1;
        if a {
            a -= 1;
        } else {
            return 1;
        }
    }
    return 0;
}

fn le(mut a: usize, mut b: usize) -> usize {
    while a {
        a -= 1;
        if b {
            b -= 1;
        } else {
            return 0;
        }
    }
    return 1;
}

fn gt(mut a: usize, mut b: usize) -> usize {
    while a {
        a -= 1;
        if b {
            b -= 1;
        } else {
            return 1;
        }
    }
    return 0;
}

fn ge(mut a: usize, mut b: usize) -> usize {
    while b {
        b -= 1;
        if a {
            a -= 1;
        } else {
            return 0;
        }
    }
    return 1;
}

fn not(a: usize) -> usize {
    if a {
        return 0;
    } else {
        return 1;
    }
}

fn print_int(mut num: usize) {
    let divisor = 10;
    let mut remainder = divisor;
    let mut quotient = 0;
    while num {
        num -= 1;
        match remainder {
            0 => {
                remainder = divisor;
                quotient += 1;
            }
        }
        remainder -= 1;
    }
    if remainder {
        let temp = remainder;
        remainder = divisor;
        remainder -= temp;
    } else {
        quotient += 1;
    }
    if quotient {
        print_int(quotient);
    }
    remainder += 48;
    print_char!(remainder);
}

fn read_int() -> usize {
    let mut c = 0;
    let mut num = 0;
    loop {
        c = read_char!();
        if c == '\n' {
            break;
        }
        c -= 48;
        num *= 10;
        num += c;
    }
    return num;
}
