fn add(mut a: usize, b: usize) -> usize {
    a += b;
    return a;
}

fn sub(mut a: usize, b: usize) -> usize {
    a -= b;
    return a;
}

fn mul(mut a: usize, b: usize) -> usize {
    let mut result = 0;
    loop {
        match a {
            0 => break,
            _ => {
                a -= 1;
                result += b;
            }
        }
    }
    return result;
}

fn div(mut dividend: usize, divisor: usize) -> usize {
    let mut remainder = divisor;
    let mut quotient = 0;
    loop {
        match dividend {
            0 => break,
            _ => {
                dividend -= 1;
                match remainder {
                    0 => {
                        remainder = divisor;
                        quotient += 1;
                    }
                    _ => remainder -= 1,
                }
            }
        }
    }
    match remainder {
        0 => quotient += 1,
        _ => {
            let temp = remainder;
            remainder = divisor;
            remainder -= temp;
        }
    }
    return quotient;
}

fn rem(mut dividend: usize, divisor: usize) -> usize {
    let mut remainder = divisor;
    let mut quotient = 0;
    loop {
        match dividend {
            0 => break,
            _ => {
                dividend -= 1;
                match remainder {
                    0 => {
                        remainder = divisor;
                        quotient += 1;
                    }
                    _ => remainder -= 1,
                }
            }
        }
    }
    match remainder {
        0 => quotient += 1,
        _ => {
            let temp = remainder;
            remainder = divisor;
            remainder -= temp;
        }
    }
    return remainder;
}

fn eq(mut a: usize, b: usize) -> bool {
    a -= b;
    match a {
        0 => return true,
        _ => return false,
    }
}

fn ne(mut a: usize, b: usize) -> bool {
    a -= b;
    match a {
        0 => return false,
        _ => return true,
    }
}

fn lt(mut a: usize, mut b: usize) -> bool {
    loop {
        match b {
            0 => break,
            _ => {
                b -= 1;
                match a {
                    0 => return true,
                    _ => a -= 1,
                }
            }
        }
    }
    return false;
}

fn le(mut a: usize, mut b: usize) -> bool {
    loop {
        match a {
            0 => break,
            _ => {
                a -= 1;
                match b {
                    0 => return false,
                    _ => b -= 1,
                }
            }
        }
    }
    return true;
}

fn gt(mut a: usize, mut b: usize) -> bool {
    loop {
        match a {
            0 => break,
            _ => {
                a -= 1;
                match b {
                    0 => return true,
                    _ => b -= 1,
                }
            }
        }
    }
    return false;
}

fn ge(mut a: usize, mut b: usize) -> bool {
    loop {
        match b {
            0 => break,
            _ => {
                b -= 1;
                match a {
                    0 => return false,
                    _ => a -= 1,
                }
            }
        }
    }
    return true;
}

fn not(a: bool) -> bool {
    if a {
        return false;
    } else {
        return true;
    }
}

fn print_int(mut num: usize) {
    let divisor = 10;
    let mut remainder = divisor;
    let mut quotient = 0;
    loop {
        match num {
            0 => break,
            _ => {
                num -= 1;
                match remainder {
                    0 => {
                        remainder = divisor;
                        quotient += 1;
                    }
                    _ => remainder -= 1,
                }
            }
        }
    }
    match remainder {
        0 => quotient += 1,
        _ => {
            let temp = remainder;
            remainder = divisor;
            remainder -= temp;
        }
    }
    match quotient {
        0 => {},
        _ => print_int(quotient),
    }
    remainder += 48;
    print_char!(remainder);
}

fn read_int() -> usize {
    let mut c = 0;
    let mut num = 0;
    loop {
        c = read_char!();
        if c == '\n' {
            break;
        }
        c -= 48;
        num *= 10;
        num += c;
    }
    return num;
}
